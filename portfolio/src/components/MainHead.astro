---
import "../styles/global.css";
import { SEO } from "astro-seo";

interface Props {
  title?: string | undefined;
  description?: string | undefined;
  noIndex?: boolean | string;
}
// const { noIndex } = Astro.props as { noIndex: boolean };
const {
  title = "Ian LP, A creative front end developer from Chicago",
  description = "The personal site of Ian Perincek",
  noIndex = false,
} = Astro.props;
---

<meta charset="UTF-8" />
<meta name="description" property="og:description" content={description} />
<meta name="viewport" content="width=device-width" />
<meta name="generator" content={Astro.generator} />
<title>{title}</title>

<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />

{noIndex && <meta name="robots" content="noindex" />}

<link
  href="https://fonts.googleapis.com/css2?family=Public+Sans:ital,wght@0,400;0,700;1,400&family=Rubik:wght@500;600&display=swap"
  rel="stylesheet"
/>

<script is:inline>
  // This code is inlined in the head to make dark mode instant & blocking.
  //   const getThemePreference = () => {
  //     if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
  //       return localStorage.getItem("theme");
  //     }
  //     return window.matchMedia("(prefers-color-scheme: dark)").matches
  //       ? "dark"
  //       : "light";
  //   };
  //   const isDark = getThemePreference() === "dark";
  //   document.documentElement.classList[isDark ? "add" : "remove"]("theme-dark");

  //   if (typeof localStorage !== "undefined") {
  //     // Watch the document element and persist user preference when it changes.
  //     const observer = new MutationObserver(() => {
  //       const isDark = document.documentElement.classList.contains("theme-dark");
  //       localStorage.setItem("theme", isDark ? "dark" : "light");
  //     });
  //     observer.observe(document.documentElement, {
  //       attributes: true,
  //       attributeFilter: ["class"],
  //     });
  //   }

  //   const scrollThreshold = 100;

  //   let scrollingTimeout;

  //   window.addEventListener("scroll", () => {
  //     document.documentElement.classList.add("theme-dark");

  //     clearTimeout(scrollingTimeout);

  //     scrollingTimeout = setTimeout(() => {
  //       document.documentElement.classList.remove("theme-dark");
  //     }, 1000);
  //   });

  const scrollThreshold = 450;

  window.addEventListener("scroll", () => {
    const scrollTop = window.scrollY || document.documentElement.scrollTop;

    if (scrollTop > scrollThreshold) {
      document.documentElement.classList.remove("theme-dark");
    } else {
      document.documentElement.classList.add("theme-dark");
    }
  });
</script>
